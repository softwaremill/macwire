case class A()
case class B()

object Test {
    case class C(a: A, b: B)

    object C {
        def factory(a: A, b: B): C = {
            wire[C]
        }
    }

    lazy val a: A = wire[A]
    lazy val b: B = wire[B]

    lazy val c: C = wireWith(C.factory _)
}

require(Test.c.a eq Test.a)
require(Test.c.b eq Test.b)
